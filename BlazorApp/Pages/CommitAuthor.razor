@page "/commitauthor"
@using System.Text.Json
@using System.Text.Json.Serialization
<PageTitle>Commit Author</PageTitle>

<h1>Commit Author</h1>

<p>See Commit Author History:</p>

@if (getAuthorError == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    @foreach (var authorCommit in authorCommits)
    {
        <p>@authorCommit.Name</p>
        <p>@authorCommit.TotalCommitCount</p>
    }
    <div class="container">
        <div class="row">
            <div class="col-sm-12 col-lg-6 offset-lg-3 my-5">
                <RadzenChart>
                    <RadzenPieSeries Data="@authorCommits" Title="Author Commits" CategoryProperty="Name" ValueProperty="TotalCommitCount"></RadzenPieSeries>
                </RadzenChart>
            </div>
        </div>
    </div>
}

@code {
    private IEnumerable<AuthorCommit> authorCommits = Array.Empty<AuthorCommit>();
    private bool getAuthorError;
    private bool shouldRender;

    protected override bool ShouldRender() => shouldRender;

    protected override async Task OnInitializedAsync()
    {
        var request = new HttpRequestMessage(HttpMethod.Get, "https://localhost:7283/author/MadsRoager/MutualExclusion");
        var clientHandler = new HttpClientHandler();
        clientHandler.ServerCertificateCustomValidationCallback = (sender, cert, chain, sslPolicyErrors) => true;
        var client = new HttpClient(clientHandler);
        var response = await client.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            await using var responseStream = await response.Content.ReadAsStreamAsync();
            authorCommits = await JsonSerializer.DeserializeAsync<IEnumerable<AuthorCommit>>(responseStream);
        }
        else
        {
            getAuthorError = true;
        }
        shouldRender = true;
    }

    public class AuthorCommit
    {
        [JsonPropertyName("commits")] public CommitCount[] Commits { get; set; }
        [JsonPropertyName("name")] public string Name { get; set; }
        public int TotalCommitCount => Commits.Sum(commitsByDate => commitsByDate.Count);
    }

    public record CommitCount
    {
        [JsonPropertyName("count")] public int Count { get; set; }
        [JsonPropertyName("date")] public DateTime Date { get; set; }
    }
}