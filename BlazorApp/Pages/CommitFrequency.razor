@page "/commitfrequency"
@using System.Globalization
@using Radzen
@using System.Text.Json
@using System.Text.Json.Serialization
@inject Data.StartPageModel startPageModel

<PageTitle>Commit Frequency</PageTitle>

<h1>Commit Frequency for @startPageModel.RepoPath</h1>

<p>Commit Frequency History:</p>

@if (getCommitsError == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else if (!startPageModel.IsValidRepo)
{
    <p>
        Repository Path was not valid
    </p>
}
else
{
    <RadzenChart>
        <RadzenColumnSeries Title="Commits" Data="@frequency" CategoryProperty="Date" ValueProperty="Frequency"/>
    </RadzenChart>
}
@code {
    private IEnumerable<CommitPerDay> frequency = Array.Empty<CommitPerDay>();
    private bool getCommitsError;
    private bool shouldRender;

    protected override async Task OnInitializedAsync()
    {
        var request = new HttpRequestMessage(HttpMethod.Get,
            "https://localhost:7283/frequency/"  + startPageModel.RepoPath);
        HttpClientHandler clientHandler = new HttpClientHandler();
        clientHandler.ServerCertificateCustomValidationCallback = (sender, cert, chain, sslPolicyErrors) => { return true; };


        var client = new HttpClient(clientHandler);
        
        var response = await client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            using var responseStream = await response.Content.ReadAsStreamAsync();
            frequency = await JsonSerializer.DeserializeAsync
                <IEnumerable<CommitPerDay>>(responseStream);
            var freq = frequency.ToArray();
        }
        else
        {
            getCommitsError = true;
        }

        shouldRender = true;
    }


    public class CommitPerDay
    {
        [JsonPropertyName("count")]
        public int Frequency { get; set; }
        [JsonPropertyName("date")]
        public DateTime Date { get; set; }
    }
}